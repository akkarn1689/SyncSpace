// components/chat/ChatPage.jsx
import React, { useState, useEffect } from 'react';
import { useSocket } from '../../hooks/useSocket';
import UserSidebar from './UserSidebar';
import ChatBox from './ChatBox';
import MessageList from './MessageList';

const ChatPage = () => {
    const [selectedUser, setSelectedUser] = useState(null);
    const { socket, isConnected } = useSocket();

    return (
        <div className="flex h-screen">
            <UserSidebar 
                onSelectUser={setSelectedUser} 
                isSocketConnected={isConnected}
            />
            <div className="flex-grow">
                {selectedUser ? (
                    <ChatBox 
                        user={selectedUser} 
                        socket={socket}
                    />
                ) : (
                    <div className="flex items-center justify-center h-full text-gray-500">
                        Select a user to start chatting
                    </div>
                )}
            </div>
        </div>
    );
};

// components/chat/UserSidebar.jsx
import React, { useState, useEffect } from 'react';
import { Users, Search } from 'lucide-react';

const UserSidebar = ({ onSelectUser, isSocketConnected }) => {
    const [users, setUsers] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');

    useEffect(() => {
        // Fetch users logic
        const fetchUsers = async () => {
            // Implement user fetching from API
        };
        fetchUsers();
    }, []);

    const filteredUsers = users.filter(user => 
        user.username.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <div className="w-80 bg-gray-100 border-r p-4">
            <div className="flex items-center mb-4">
                <Users className="mr-2" />
                <h2 className="text-xl font-semibold">Friends</h2>
            </div>

            <div className="relative mb-4">
                <input 
                    type="text" 
                    placeholder="Search friends"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full p-2 pl-8 border rounded"
                />
                <Search className="absolute left-2 top-3 text-gray-400" />
            </div>

            <div className="space-y-2">
                {filteredUsers.map(user => (
                    <div 
                        key={user.id} 
                        onClick={() => onSelectUser(user)}
                        className="flex items-center p-2 hover:bg-gray-200 cursor-pointer rounded"
                    >
                        <img 
                            src={user.profilePicture} 
                            alt={user.username} 
                            className="w-10 h-10 rounded-full mr-3"
                        />
                        <div>
                            <div className="font-medium">{user.username}</div>
                            <div className={`text-sm ${
                                user.online ? 'text-green-600' : 'text-gray-500'
                            }`}>
                                {user.online ? 'Online' : 'Offline'}
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

// components/chat/ChatBox.jsx
import React, { useState, useEffect } from 'react';
import { Send, Paperclip, Smile } from 'lucide-react';
import MessageList from './MessageList';

const ChatBox = ({ user, socket }) => {
    const [message, setMessage] = useState('');
    const [messages, setMessages] = useState([]);

    const handleSendMessage = () => {
        if (message.trim() && socket) {
            socket.emit('send_message', {
                recipientId: user.id,
                content: message
            });
            setMessage('');
        }
    };

    useEffect(() => {
        // Listen for incoming messages
        socket?.on('message_received', (newMessage) => {
            setMessages(prev => [...prev, newMessage]);
        });

        return () => {
            socket?.off('message_received');
        };
    }, [socket]);

    return (
        <div className="flex flex-col h-full">
            <div className="bg-gray-100 p-4 border-b flex items-center">
                <img 
                    src={user.profilePicture} 
                    alt={user.username} 
                    className="w-10 h-10 rounded-full mr-3" 
                />
                <div>
                    <h2 className="font-semibold">{user.username}</h2>
                    <div className="text-sm text-gray-500">
                        {user.online ? 'Online' : 'Offline'}
                    </div>
                </div>
            </div>

            <MessageList messages={messages} currentUser={user} />

            <div className="p-4 bg-white border-t flex items-center">
                <button className="mr-2">
                    <Paperclip />
                </button>
                <button className="mr-2">
                    <Smile />
                </button>
                <input 
                    type="text"
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    placeholder="Type a message..."
                    className="flex-grow p-2 border rounded-lg mr-2"
                />
                <button 
                    onClick={handleSendMessage}
                    className="bg-blue-500 text-white p-2 rounded-full"
                >
                    <Send />
                </button>
            </div>
        </div>
    );
};

// components/notifications/NotificationItem.jsx
import React from 'react';
import { Bell, UserPlus, MessageCircle } from 'lucide-react';

const NotificationItem = ({ type, message, timestamp }) => {
    const getIcon = () => {
        switch (type) {
            case 'friend_request': return <UserPlus />;
            case 'message': return <MessageCircle />;
            default: return <Bell />;
        }
    };

    return (
        <div className="flex items-center p-3 hover:bg-gray-100 cursor-pointer">
            <div className="mr-3">{getIcon()}</div>
            <div>
                <p className="text-sm">{message}</p>
                <span className="text-xs text-gray-500">
                    {new Date(timestamp).toLocaleString()}
                </span>
            </div>
        </div>
    );
};

export default NotificationItem;

// components/chat/MessageList.jsx
import React from 'react';

const MessageList = ({ messages, currentUser }) => {
    return (
        <div className="flex-grow overflow-y-auto p-4 space-y-3">
            {messages.map((msg, index) => (
                <div 
                    key={index}
                    className={`flex ${
                        msg.sender.id === currentUser.id 
                        ? 'justify-end' 
                        : 'justify-start'
                    }`}
                >
                    <div 
                        className={`max-w-[70%] p-2 rounded-lg ${
                            msg.sender.id === currentUser.id 
                            ? 'bg-blue-500 text-white' 
                            : 'bg-gray-200'
                        }`}
                    >
                        {msg.content}
                    </div>
                </div>
            ))}
        </div>
    );
};

export default {
    ChatPage,
    UserSidebar,
    ChatBox,
    MessageList,
    NotificationItem
};